#!/usr/bin/env bash

# Copyright (C) 2021-2022 Zaharia Constantin <constantin.zaharia@progeek.ro>
# Copyright (C) 2021-2022 ProGeek <https://progeek.ro>
# SPDX-License-Identifier: GPL-3.0-or-later

# Build an Ansible Galaxy collection tarball with Ansible artifacts
# Usage: run "make collection" in the root of the repository

#set -o nounset -o pipefail -o errexit

repository_root="$(git rev-parse --show-toplevel)"
current_branch="${CURRENT_BRANCH:-$(git name-rev --name-only HEAD)}"
current_version="${CURRENT_VERSION:-$(git describe | tr -d 'v')}"

declare -a progeekro_role_map
declare -A role_collection_map
declare -a collection_name_map
declare -a workdir_map

collections=( bootstrap )

for i in "${!collections[@]}" ; do
    collection_name_map[${collections[${i}]}]="${i}"
done

# Check if we are in the correct directory
if ! [ -f lib/ansible-galaxy/make-collection ] ; then
    printf "%s\\n" "Error: this script needs to be executed in the root of the ProGeek repository"
    exit 1
fi

# Check if ansible-galaxy is installed
if ! type ansible-galaxy > /dev/null 2>&1 ; then
    printf "%s\\n" "Error: ansible-galaxy not found"
    exit 1
fi

# Check if the repository is in a consistent state
if ! git diff --quiet && git diff --cached --quiet ; then
    printf "%s\\n" "Warning: there are uncommitted changes in the repository"
    git status --short
fi

printf "Creating ProGeek Collections\\nBranch: %s\\nVersion: %s\\n" "${current_branch}" "${current_version}"

cd "${repository_root}" || exit

for role in ansible/roles/* ; do
    if [ -d "${role}" ] ; then
        progeekro_role_map+=("$(basename "${role}")")
    fi
done

# Generate list of roles included in collection
for role in "${progeekro_role_map[@]}" ; do
    role_collection_map[${collections[0]}]+=" ${role}"
done

# Show what roles are included in collection
for collection in "${collections[@]}" ; do
    if [[ -v "role_collection_map[${collection}]" ]] ; then
        read -r -a collection_array <<<"${role_collection_map[${collection}]}"
        readarray -t sorted_array < <(printf '%s\0' "${collection_array[@]}" | sort -z | xargs -0n1)
        printf "Roles included in '%s' collection (%s):\\n" "progeekro.${collection}" "$(printf "%s\\n" "${sorted_array[@]}" | tr ' ' '\n' | wc -l)"
        printf "%s\\n" "${sorted_array[@]}" | tr ' ' '\n' | column
        printf '\n'
    fi
done

printf "Gathering license information...\\n"
if [ -d "LICENSES" ] ; then
    read -r -a used_licenses <<<"$(reuse lint | grep "Used licenses:" \
                                   | sed -e "s/^.*Used licenses: //" \
                                   | tr ',' ' ')"
else
    used_licenses=( "GPL-3.0-or-later" )
fi

workdir_path="$(mktemp -d "/tmp/progeekro-collections.XXXXXXXX")"
for collection in "${collections[@]}" ; do
    workdir_map[${collection}]="$(mktemp -d "${workdir_path}/progeekro-$$.${collection}.XXXXXXXX")"
done

file_list=(
    .yamllint
    README.md
    INSTALL.rst
    CHANGELOG.rst
)

directory_list=(
    LICENSES
)

mkdir -p "${workdir_map[${collections[0]}]}/playbooks" \
         "${workdir_map[${collections[0]}]}/roles" \
         "${workdir_map[${collections[0]}]}/plugins/callback" \
         "${workdir_map[${collections[0]}]}/plugins/connection" \
         "${workdir_map[${collections[0]}]}/plugins/filter" \
         "${workdir_map[${collections[0]}]}/plugins/lookup" \
         "${workdir_map[${collections[0]}]}/plugins/modules" \

# Copy ProGeek roles to the Ansible Collection build directory.
# Omit specific ProGeek roles from Ansible Collections.
pushd ansible/roles > /dev/null || exit
for collection in "${collections[@]}" ; do
    printf "Creating collection 'progeekro.%s'\\n" "${collection}"
    read -r -a collection_roles <<<"${role_collection_map[${collection}]}"
    for role in * ; do
    for role_in_collection in "${collection_roles[@]}" ; do
            generated_readme="false"
            if ! [ -f "${role}/README.md" ] ; then
                generated_readme="true"
                if [ -f "../../docs/ansible/roles/${role}/man_description.rst" ] ; then
                    pandoc "../../docs/ansible/roles/${role}/man_description.rst" \
                        -f rst -t markdown_strict -s \
                        -V "titleblock:### ${role}" \
                        -V "include-after:Read the [${role} role documentation](https://progeekro.github.io/docs/en/${current_branch}/ansible/roles/${role}/) for more details." \
                        -o "${role}/README.md"
                else
                    cat <<EOF > "${role}/README.md"
### ${role}

This role does not have official documentation.
See [ProGeek documentation](progeekro.github.io/docs/en/${current_branch}/) instead.
EOF
                fi
            fi
            cp -r "${role}" "${workdir_map[${collection}]}/roles/${role}"
            if [ "${generated_readme}" == "true" ] ; then
                rm -f "${role}/README.md"
            fi
        done
    done
done
popd > /dev/null || exit

# Copy ProGeek playbooks into the collection
printf "Copy playbooks into the collection\\n"
cp -r ansible/playbooks/* "${workdir_map[${collections[0]}]}/playbooks"

# Copy various Ansible plugins to the directories where collection expects them
cp ansible/plugins/callback/*.py "${workdir_map[${collections[0]}]}/plugins/callback" >/dev/null 2>&1
cp ansible/plugins/connection/*.py "${workdir_map[${collections[0]}]}/plugins/connection" >/dev/null 2>&1
cp ansible/plugins/filter/*.py "${workdir_map[${collections[0]}]}/plugins/filter" >/dev/null 2>&1
cp ansible/plugins/lookup/*.py "${workdir_map[${collections[0]}]}/plugins/lookup" >/dev/null 2>&1
cp ansible/plugins/modules/*.py "${workdir_map[${collections[0]}]}/plugins/modules" >/dev/null 2>&1

for collection in "${collections[@]}" ; do

    for filename in "${file_list[@]}" ; do
        cp "${filename}" "${workdir_map[${collection}]}/"
    done

    for directory in "${directory_list[@]}" ; do
        if [ -d "${directory}" ] ; then
            cp -r "${directory}" "${workdir_map[${collection}]}/"
        fi
    done

    # Create meta/runtime.yml metadata file
    mkdir "${workdir_map[${collection}]}/meta"
    cat <<EOF > "${workdir_map[${collection}]}/meta/runtime.yml"
---
requires_ansible: ">=3.9"
EOF

    # Generate the 'galaxy.yml' file
    if [ "${collection}" == "${collections[0]}" ] ; then
        printf "Generate the galaxy.yml file\\n"
        cat <<EOF > "${workdir_map[${collection}]}/galaxy.yml"
---

# Configuration file used by Ansible Galaxy to build a collection of Ansible artifacts.

namespace: "progeekro"
name: "${collections[${collection_name_map[${collection}]}]}"
version: "${current_version}"
description: "Your Debian-based bootostrap roles"

authors:
  - "Constantin Zaharia <constantin.zaharia@progeek.ro>"

repository: "https://github.com/progeekro/bootstrap"
documentation: "https://progeekro.github.io/docs/en/${current_branch}/ansible/role-index.html"
homepage: "https://progeek.ro"
issues: "https://github.com/progeekro/bootstrap/issues"

readme: "README.md"
license:
EOF
        for license in "${used_licenses[@]}" ; do
            cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"
  - "${license}"
EOF
        done
        cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"

tags:
  - "debian"
  - "ubuntu"
  - "progeekro"
  - "sysadmin"
  - "cluster"
  - "datacenter"

dependencies:
  "ansible.posix": "*"
  "community.crypto": "*"
  "community.general": "*"
EOF
        for collection_dep in "${collections[@]}" ; do
            if [[ -v "collection_name_map[${collection_dep}]" ]] && [ "${collection_dep}" != "${collections[0]}" ] ; then
                cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"
  "progeekro.${collection_dep}": "${current_version}"
EOF
            fi
        done
    else
        cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"
---

# Configuration file used by Ansible Galaxy to build a collection of Ansible artifacts.

namespace: "progeekro"
name: "${collections[${collection_name_map[${collection}]}]}"
version: "${current_version}"
description: "Additional roles included in the ProGeek Collection"

authors:
  - "Constantin Zaharia <constantin.zaharia@progeek.ro>"

repository: "https://github.com/progeekro/bootstrap"
documentation: "https://progeekro.github.io/docs/en/${current_branch}/ansible/role-index.html"
homepage: "https://progeek.ro"
issues: "https://github.com/progeekro/bootstrap/issues"

readme: "README.md"
license:
EOF
        for license in "${used_licenses[@]}" ; do
            cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"
  - "${license}"
EOF
        done
        cat <<EOF >> "${workdir_map[${collection}]}/galaxy.yml"

tags:
  - "debian"
  - "ubuntu"
  - "progeekro"
  - "sysadmin"
  - "cluster"
  - "datacenter"

dependencies:
  "ansible.posix": "*"
  "community.crypto": "*"
  "community.general": "*"
EOF
    fi
done

for collection in "${collections[@]}" ; do
    if [ -d "${workdir_map[${collection}]}" ] ; then
        pushd "${workdir_map[${collection}]}" > /dev/null || exit
        ansible-galaxy collection build
        python3 -m galaxy_importer.main progeekro-*.tar.gz
        printf "Copy collection: %s to the new location\\n"  "${collection}"
        cp progeekro-*.tar.gz "$(dirname ${repository_root})/"
        popd > /dev/null || exit
    fi
done

# Show the file sizes of collection tarballs
printf "Show the file sizes of collection tarballs\\n"
du -h "$(dirname ${repository_root})"/*.tar.gz