---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2021-2022 Zaharia Constantin <constantin.zaharia@progeek.ro>
# Copyright (C) 2021-2022 ProGeek <https://progeek.ro>
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Import global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Install requested packages
  ansible.builtin.package:
    name: '{{ smartd__packages }}'
    state: 'present'
  register: smartd__register_packages
  until: smartd__register_packages is succeeded
  when: smartd__enabled | bool

- name: Detect available disk devices
  ansible.builtin.shell:
    cmd: "lsblk -ndo name,mountpoint,ro --include '8,179,259' | awk '/^[a-z]{3,}+/gm && !/[./]/ && /0$/{print $1}'"
  register: lsblk_devices
  when: smartd__enabled | bool

- name: Make sure that Ansible local facts directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save machine local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/smartmontools.fact.j2'
    dest: '/etc/ansible/facts.d/smartmontools.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

# Disable existing DEVICESCAN entry (anything past it is ignored)
- name: Add devices to /etc/smartd.conf
  ansible.builtin.lineinfile:
    path: "/etc/smartd.conf"
    regexp: "^(DEVICESCAN*)"
    line: "#\\1"
    state: present
  when: smartd__enabled|bool

# Remove any pre-existing devices no longer present.  Device names change
# when moved to new systems, motherboards, controllers, etc.
- name: Remove existing devices from /etc/smartd.conf
  ansible.builtin.lineinfile:
    path: "/etc/smartd.conf"
    regexp: "^(\/dev\/disk\/by-id\/*)"
    state: absent
  when: smartd__enabled|bool

# Add one line per device to "/etc/smartd.conf" replace any existing line for device
# ( -a) enables some common options
# (-H) checks the SMART health status
# (-l) reports increases in both SMART error logs
# (-f) checks for failure of any Usage Attributes
# -s (S/../.././02|L/../../6/03)" schedules the short and long self-tests
# In this example, the short self-test will run daily at 2:00 A.M. The long test will run on every Saturday at 3:00 A.M.
- name: Add devices to /etc/smartd.conf
  ansible.builtin.lineinfile:
    path: "/etc/smartd.conf"
    regexp: "^{{ item }}"
    line: "{{ item }} -a -H -l error -l selftest -f -s (S/{{ smartd__short_test }}|L/{{ smartd__long_test }}) -m root -M exec /usr/share/smartmontools/smartd-runner"
    state: present
  loop: "{{ ansible_local.smartmontools.disk_by_id | list }}"
  when: smartd__enabled|bool and ansible_local.smartmontools.disk_by_id is defined
  notify: Restart smartd service
